:root {
  --space: 0.5em;
  --oorange: #f56600;
  --light-oorange: #ffba36;
  --oblue: #0014f5;
}

* {
  max-width: 100%;
}

body {
  font-family: sans-serif;
}

table {
  border-collapse: collapse;
  margin: 1em 0;
  width: 100%;
}

thead {
  background-color: var(--light-oorange);
}

th {
  font-weight: normal;
}

tbody th {
  text-align: left;
}

td:nth-of-type(1), td:nth-of-type(2) {
  text-align: center;
}

@media (max-width: 40ch) {
  td:nth-of-type(1), td:nth-of-type(2) {
    text-align: initial;
  }
}

table input {
  width: 100%;
}

/* TODO: Set fixed column widths for fields */

col:nth-child(1) {
  width: 14ch;
}

col:nth-child(2) {
  width: 8ch;
}

col:nth-child(3) {
  width: 10ch;
}

col:nth-child(4) {
  width: 10ch;
}

td > span {
  display: inline-flex;
}

.spaceBefore {
  padding-left: var(--space);
}

@media (max-width: 40ch) {
  /* Force table to not be like tables anymore */
  table, thead, tbody, th, td, tr {
    display: block;
  }

  /* Hide table headers (but not display: none;, for accessibility) */
  thead tr {
    position: absolute;
    top: -9999px;
    left: -9999px;
  }

  tbody th {
    background-color: var(--light-oorange);
  }

  td {
    /* Behave  like a "row" */
    border: none;
    position: relative;
    padding-left: 12ch;
  }

  td::before {
    /* Now like a table header */
    position: absolute;
    top: 0;
    left: 0;
  }
  /*
      Label the data
      You could also use a data-* attribute and content for this. That way "bloats" the HTML, this way means you need to keep HTML and CSS in sync. Lea Verou has a clever way to handle with text-shadow.
      */
  td:nth-of-type(1):not(:empty):before {
    content: "Default";
  }
  td:nth-of-type(2):not(:empty):before {
    content: "Automatic";
  }
  td:nth-of-type(3):not(:empty):before {
    content: "Value";
  }
  td:nth-of-type(4):not(:empty):before {
    content: "Error/Warning";
  }
}

.centre {
  text-align: center;
}

.right {
  text-align: right;
}

ol ol {
  list-style-type: lower-roman;
}

summary, .warning {
  background-color: var(--light-oorange);
}

.error {
  color: var(--oblue);
  background-color: var(--oorange);
}

/* Progressively indent nested levels in menu */

details details {
  margin-left: 1ch;
}

/* Unformatted list */

#fields ul {
  list-style-type: none;
  padding: 0;
}

button {
  align-self: stretch;
}

select {
  vertical-align: middle;
}

/* Allow fieldset to shrink beyond minimum content size */

fieldset {
  min-width: 0;
  margin-bottom: 2ex;
}

summary+fieldset {
  margin-top: 2ex;
}

fieldset>ul {
  margin-top: 0ex;
}

fieldset>ul:last-child {
  margin-bottom: 0ex;
}

/* Keep group of buttons on same line as far as possible */

.btnGroup {
  display: inline-flex;
  flex-wrap: wrap;
}

.btnGroup>* {
  flex: auto;
  margin-right: var(--space);
  /* One space */
}

.autoOrder {
  display: flex;
  align-items: center;
  flex-wrap: wrap;
}

@media (min-width: 35ch) {
  .autoOrder {
    flex-wrap: nowrap;
  }
}

.fieldList li {
  margin-bottom: 2ex;
}

/* Use long compact lines on large screens, otherwise space out with many line breaks */

.fieldList li {
  display: flex;
  align-items: center;
  flex-wrap: wrap;
  margin-bottom: 2ex;
}

@media (min-width: 81ch) {
  .fieldList li {
    flex-wrap: nowrap;
    margin-bottom: initial;
  }
}

/* Labels are fixed width to align contents nicely - still won't exceed page width */

.fieldList li>label {
  width: 15ch;
  flex: none;
}

/* Buttons and input fields after label arranged into nice block where input expands to fill space */

.inputBlock {
  width: 33ch;
  display: inline-flex;
  flex-wrap: wrap;
  align-items: center;
}

@media (min-width: 41ch) {
  .inputBlock {
    flex: none;
    flex-wrap: nowrap;
  }
}

/* Sub-flex box to keep unit on same line as input */

.inputBlock .withUnit {
  min-width: 0;
  flex: auto;
  display: inline-flex;
}

.inputBlock input, .inputBlock select {
  flex: auto;
}

input[id$="Auto"], input[id$="Rule"] {
  flex: initial;
}

.inputBlock input:not([type="checkbox"]) {
  min-width: 6ch;
}

.inputBlock>*, .autoOrder>*, .withUnit>* {
  margin-right: var(--space);
}

.withUnit>*:last-child {
  margin-right: 0;
}

.autoBtnList li {
  margin-bottom: 2ex;
  align-items: center;
}

.autoBtnList li>* {
  display: block;
}

.autoBtnList span {
  width: 10ch;
  flex: none;
}

@media (min-width: 46ch) {
  .autoBtnList li {
    margin-bottom: initial;
    display: flex;
  }
  .autoBtnList li>* {
    margin-right: var(--space);
  }
}

/* Keep tick box label as a multiline to right of tick box */

.tickRow {
  display: flex;
}

span.tickRow {
  display: inline-flex;
}

.tickRow>input {
  margin-right: var(--space);
}

.tickRow>button {
  margin-left: var(--space);
}

#ppenStatus {
  margin-bottom: 2ex;
}
